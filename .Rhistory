matrix(suffstat)
as.matrix(suffstat)
suffStat <- list(data, adaptDF = FALSE)
as.matrix(suffstat)
suffStat <- list(data, adaptDF = FALSE)
suffStat
levels(data)
levels(data$diagnosis)
nlevels(data$diagnosis)
nlevels(data$age)
suffStat <- list(data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
is.matrix(suffStat)
suffStat
data.matrix(data)
suffStat
suffSta <- data.matrix(data)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
is.matrix(suffStat)
suffSta <- data.matrix(data)
suffStat <- data.matrix(data)
is.matrix(suffStat)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
suffStat
suffStat <- list(data.matrix(data))
suffStat
is.matrix(suffStat)
suffStat <- data.matrix(data)
is.matrix(suffStat)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
suffStat <- data.matrix(data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2))
suffStat <- list(data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
suffStat
suffStat <- list(data.matrix(data), nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
suffStat
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
suffStat <- list(data.matrix(data), nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
suffStat
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
datmat <- data.matrix(data)
is.matrix(datmat)
suffStat <- list(datmat, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
suffStat
suffStat.dm
suffStat[1]
is.matrix(suffStat[1])
is.matrix(as.matrix(suffStat[1]))
as.matrix(suffstat[1])
suffStat <- list(data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
data.matrix(suffstat[1])
suffStat <- list(data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
data.matrix(suffstat[1])
suffstat[1]
suffStat <- list(datmat, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
suffstat[1]
datmat <- data.matrix(data)
is.matrix(datmat)
suffStat <- list(datmat, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
suffstat[1]
data.matrix(suffstat[1])
is.matrix(as.matrix(suffStat[1]))
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
suffStat[1]
is.matrix(suffStat[1])
typeof(suffStat[1])
is.matrix(matrix(unlist(suffStat[1])))
matrix(unlist(suffStat[1]))
matrix(unlist(suffStat[1]), ncol = 14, byrow = TRUE)
typeof(suffStat[1])
idk <- matrix(unlist(suffStat[1]), ncol = 14, byrow = TRUE)
is.matrix(idk)
suffstat[1] <- idk
suffStat <- list(idk, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
suffstat[1]
suffstat
suffStat <- list(idk, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
suffstat
idk <- matrix(unlist(suffStat[1]), ncol = 14, byrow = TRUE)
idk
suffStat <- list(data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
suffstat
suffStat <- list(data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
suffstat
suffstat[0]
suffstat[1]
### pc-algorithm
data
lables <- colnames(data)
suffStat <- list(data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
suffstat
# remotes::install_github("jtextor/bayesianNetworks")
### Libraries
library(dagitty)
library(bayesianNetworks)
library(bnlearn)
library(pROC)
library(ggplot2)
library(caret)
library(pcalg)
### Data
data <- read.csv("data/processed_cleveland.csv", header = FALSE)
colnames(data) <- c("age", "sex", "chest_pain", "rest_blood_press",
"cholesterol", "fasting_blood_sugar", "rest_ecg",
"max_heart_rate", "exercise_induced_angina",
"ST_depression", "ST_slope", "coloured_arteries",
"thalassemia", "diagnosis")
head(data)
### Data Inspection
# Continuous Variables
range(data$age)
range(data$rest_blood_press)
range(data$cholesterol)
range(data$max_heart_rate)
range(data$ST_depression)
# Categorical Variables
factor(data$sex)[1]
factor(data$chest_pain)[1]
factor(data$fasting_blood_sugar)[1]
factor(data$rest_ecg)[1]
factor(data$exercise_induced_angina)[1]
factor(data$ST_slope)[1]
factor(data$coloured_arteries)[1]
factor(data$thalassemia)[1]
factor(data$diagnosis)[1]
### Preprocessing
# NANs
nrow(data[which(data$coloured_arteries == '?'),])
nrow(data[which(data$thalassemia == '?'),])
# Set these to values that occur most in the dataset
counts_thal <- table(data$thalassemia)
barplot(counts_thal) # The most occuring value is 3.0
counts_col <- table(data$coloured_arteries)
barplot(counts_col) # The most occuring value is 0.0
data$coloured_arteries[which(data$coloured_arteries == '?')] <- '0.0'
data$thalassemia[which(data$thalassemia == '?')] <- '3.0'
# Convert to numeric
data$thalassemia <- as.numeric(data$thalassemia)
data$coloured_arteries <- as.numeric(data$coloured_arteries)
data$diagnosis <- as.numeric(data$diagnosis)
### Dealing with different types of data
# Convert continuous data to categorical data
data$age <- as.numeric(cut(data$age, 5))
data$rest_blood_press <- as.numeric(cut(data$rest_blood_press, c(90, 120, 140, 200), labels = c(1,2,3)))
data$cholesterol <- as.numeric(cut(data$cholesterol, c(100, 200, 300, 600), labels = c(1,2,3)))
data$max_heart_rate <- as.numeric(cut(data$max_heart_rate, c(50, 110, 140, 175, 210), labels = c(1,2,3,4)))
data$ST_depression <- as.numeric(cut(data$ST_depression, c(-0.1, 0.0, 2, 6.5), labels = c(0,1,2)))
# Bin diagnosis
data$diagnosis[which(data$diagnosis > 0)] <- 1
head(data)
### pc-algorithm
data
lables <- colnames(data)
lables
datmat <- data.matrix(data)
is.matrix(datmat)
suffStat <- list(data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
suffstat
suffStat
suffStat[1]
typeof(suffStat[1])
typeof(suffStat[1,1])
typeof(suffStat[1][1])
suffStat[1][1]
suffStat[1]$age
typeof(suffStat[1])
unlist(suffStat[1])
matrix(unlist(suffStat[1]), ncol = 14, byrow = TRUE)
matrix(unlist(suffStat[1]), ncol = 14)
datmat<-matrix(unlist(suffStat[1]), ncol = 14)
typeof(datmat)
datmat<-data.matrix(unlist(suffStat[1]), ncol = 14)
datmat<- as.matrix(matrix(unlist(suffStat[1]), ncol = 14))
typeof(datmat)
datmat<- data.matrix(matrix(unlist(suffStat[1]), ncol = 14))
typeof(datmat)
datmat
is.matrix(datmat)
datmat<- matrix(matrix(unlist(suffStat[1]), ncol = 14))
is.matrix(datmat)
pc.fit = pc(suffStat = datmat, indepTest = disCItest, alpha = 0.05, labels = lables)
colnames(datmat) <- lables
datmat
datmat<- matrix(unlist(suffStat[1]), ncol = 14))
### pc-algorithm
data
lables <- colnames(data)
suffStat <- list(data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
pc.fit = pc(suffStat = datmat, indepTest = disCItest, alpha = 0.05, labels = lables)
typeof(suffStat[1])
suffStat[1]
datmat<- matrix(unlist(suffStat[1]), ncol = 14)
datmat
colnames(datmat) <- lables
is.matrix(datmat)
suffStat[1] <- datmat
datmat
suffStat[1]
suffStat <- list(datmat, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
pc.fit = pc(suffStat = datmat, indepTest = disCItest, alpha = 0.05, labels = lables)
datmat <- data.matrix(data)
datmat
is.matrix(datmat)
suffStat <- list(datmat, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
pc.fit = pc(suffStat = datmat, indepTest = disCItest, alpha = 0.05, labels = lables)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
suffStat <- list(dm = datmat, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
suffStat <- list(dm = data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
### pc-algorithm
data
lables <- colnames(data)
suffStat <- list(dm = data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
suffStat <- list(dm = data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = TRUE)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
### pc-algorithm
data
lables <- colnames(data)
suffStat <- list(dm = data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
pc.fit
plot(pc.fit)
if (require(Rgraphviz)) {
## show estimated CPDAG
plot(pc.fit, main = "Estimated CPDAG")
}
if (require(Rgraphviz)) {
## show estimated CPDAG
plot(pc.fit, main = "Estimated CPDAG")
}
typeof(pc.fit)
plot(pc.fit, cex=1.5)
plot(pc.fit, cex=10)
plot(pc.fit, cex=10)
plot(pc.fit, size=10)
graph::nodeRenderInfo(g) <- list(fontsize=20)
par(cex=0.05)
plot(pc.fit, size=10)
par(cex=0.5)
plot(pc.fit, size=10)
par(cex=0.2)
plot(pc.fit, size=10)
par(cex=0.2)
plot(pc.fit)
plot(pc.fit, cex = 0.1)
plot(pc.fit, cex = 0.7)
par(cex=0.1)
plot(pc.fit, cex = 0.7)
par(cex=0.25)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.01, labels = lables)
par(cex=0.25)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.1, labels = lables)
par(cex=0.25)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
par(cex=0.25)
plot(pc.fit)
### Install Packages
# install.packages('remotes', dependencies = TRUE)
# install.packages('bnlearn', dependencies=TRUE)
# install.packages('pROC', dependencies=TRUE)
# install.packages('ggplot2', dependencies=TRUE)
# install.packages('caret', dependencies=TRUE)
# install.packages("dagitty", dependencies = TRUE)
# install.packages('pcalg', dependencies=TRUE)
# install.packages("BiocManager")
# BiocManager::install(c("graph", "RBGL", "Rgraphviz"))
# remotes::install_github("jtextor/bayesianNetworks")
### Libraries
library(dagitty)
library(bayesianNetworks)
library(bnlearn)
library(pROC)
library(ggplot2)
library(caret)
library(pcalg)
### Data
data <- read.csv("data/processed_cleveland.csv", header = FALSE)
colnames(data) <- c("age", "sex", "chest_pain", "rest_blood_press",
"cholesterol", "fasting_blood_sugar", "rest_ecg",
"max_heart_rate", "exercise_induced_angina",
"ST_depression", "ST_slope", "coloured_arteries",
"thalassemia", "diagnosis")
head(data)
### Data Inspection
# Continuous Variables
range(data$age)
range(data$rest_blood_press)
range(data$cholesterol)
range(data$max_heart_rate)
range(data$ST_depression)
# Categorical Variables
factor(data$sex)[1]
factor(data$chest_pain)[1]
factor(data$fasting_blood_sugar)[1]
factor(data$rest_ecg)[1]
factor(data$exercise_induced_angina)[1]
factor(data$ST_slope)[1]
factor(data$coloured_arteries)[1]
factor(data$thalassemia)[1]
factor(data$diagnosis)[1]
### Preprocessing
# NANs
nrow(data[which(data$coloured_arteries == '?'),])
nrow(data[which(data$thalassemia == '?'),])
# Set these to values that occur most in the dataset
counts_thal <- table(data$thalassemia)
barplot(counts_thal) # The most occuring value is 3.0
counts_col <- table(data$coloured_arteries)
barplot(counts_col) # The most occuring value is 0.0
data$coloured_arteries[which(data$coloured_arteries == '?')] <- '0.0'
data$thalassemia[which(data$thalassemia == '?')] <- '3.0'
# Convert to numeric
data$thalassemia <- as.numeric(data$thalassemia)
data$coloured_arteries <- as.numeric(data$coloured_arteries)
data$diagnosis <- as.numeric(data$diagnosis)
### Dealing with different types of data
# Convert continuous data to categorical data
data$age <- as.numeric(cut(data$age, 5))
data$rest_blood_press <- as.numeric(cut(data$rest_blood_press, c(90, 120, 140, 200), labels = c(1,2,3)))
data$cholesterol <- as.numeric(cut(data$cholesterol, c(100, 200, 300, 600), labels = c(1,2,3)))
data$max_heart_rate <- as.numeric(cut(data$max_heart_rate, c(50, 110, 140, 175, 210), labels = c(1,2,3,4)))
data$ST_depression <- as.numeric(cut(data$ST_depression, c(-0.1, 0.0, 2, 6.5), labels = c(0,1,2)))
# Bin diagnosis
data$diagnosis[which(data$diagnosis > 0)] <- 1
head(data)
### pc-algorithm
data
lables <- colnames(data)
suffStat <- list(dm = data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
par(cex=0.25)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.5, labels = lables)
par(cex=0.25)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.8, labels = lables)
par(cex=0.25)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
par(cex=0.25)
plot(pc.fit)
suffStat <- list(dm = data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = TRUE)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
par(cex=0.25)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.5, labels = lables)
par(cex=0.25)
plot(pc.fit)
suffStat <- list(dm = data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
par(cex=0.25)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables, m.max = 4)
par(cex=0.25)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables, m.max = 2)
par(cex=0.25)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.5, labels = lables, m.max = 2)
par(cex=0.25)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.5, labels = lables, m.max = 4)
par(cex=0.25)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 1, labels = lables, m.max = 4)
par(cex=0.25)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 1, labels = lables)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 1, labels = lables, m.max)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 1, labels = lables, m.max=2)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.1, labels = lables, m.max=2)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.1, labels = lables, m.max=4)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.5, labels = lables, m.max=4)
plot(pc.fit)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
plot(pc.fit)
### Install Packages
# install.packages('remotes', dependencies = TRUE)
# install.packages('bnlearn', dependencies=TRUE)
# install.packages('pROC', dependencies=TRUE)
# install.packages('ggplot2', dependencies=TRUE)
# install.packages('caret', dependencies=TRUE)
# install.packages("dagitty", dependencies = TRUE)
# install.packages('pcalg', dependencies=TRUE)
# install.packages("BiocManager")
# BiocManager::install(c("graph", "RBGL", "Rgraphviz"))
# remotes::install_github("jtextor/bayesianNetworks")
### Libraries
library(dagitty)
library(bayesianNetworks)
library(bnlearn)
library(pROC)
library(ggplot2)
library(caret)
library(pcalg)
### Data
data <- read.csv("data/processed_cleveland.csv", header = FALSE)
colnames(data) <- c("age", "sex", "chest_pain", "rest_blood_press",
"cholesterol", "fasting_blood_sugar", "rest_ecg",
"max_heart_rate", "exercise_induced_angina",
"ST_depression", "ST_slope", "coloured_arteries",
"thalassemia", "diagnosis")
head(data)
### Data Inspection
# Continuous Variables
range(data$age)
range(data$rest_blood_press)
range(data$cholesterol)
range(data$max_heart_rate)
range(data$ST_depression)
# Categorical Variables
factor(data$sex)[1]
factor(data$chest_pain)[1]
factor(data$fasting_blood_sugar)[1]
factor(data$rest_ecg)[1]
factor(data$exercise_induced_angina)[1]
factor(data$ST_slope)[1]
factor(data$coloured_arteries)[1]
factor(data$thalassemia)[1]
factor(data$diagnosis)[1]
### Preprocessing
# NANs
nrow(data[which(data$coloured_arteries == '?'),])
nrow(data[which(data$thalassemia == '?'),])
# Set these to values that occur most in the dataset
counts_thal <- table(data$thalassemia)
barplot(counts_thal) # The most occuring value is 3.0
counts_col <- table(data$coloured_arteries)
barplot(counts_col) # The most occuring value is 0.0
data$coloured_arteries[which(data$coloured_arteries == '?')] <- '0.0'
data$thalassemia[which(data$thalassemia == '?')] <- '3.0'
# Convert to numeric
data$thalassemia <- as.numeric(data$thalassemia)
data$coloured_arteries <- as.numeric(data$coloured_arteries)
data$diagnosis <- as.numeric(data$diagnosis)
### Dealing with different types of data
# Convert continuous data to categorical data
data$age <- as.numeric(cut(data$age, 5))
data$rest_blood_press <- as.numeric(cut(data$rest_blood_press, c(90, 120, 140, 200), labels = c(1,2,3)))
data$cholesterol <- as.numeric(cut(data$cholesterol, c(100, 200, 300, 600), labels = c(1,2,3)))
data$max_heart_rate <- as.numeric(cut(data$max_heart_rate, c(50, 110, 140, 175, 210), labels = c(1,2,3,4)))
data$ST_depression <- as.numeric(cut(data$ST_depression, c(-0.1, 0.0, 2, 6.5), labels = c(0,1,2)))
# Bin diagnosis
data$diagnosis[which(data$diagnosis > 0)] <- 1
head(data)
### pc-algorithm
data
lables <- colnames(data)
suffStat <- list(dm = data, nlev = c(5, 2, 4, 3, 3, 2, 3, 4, 2, 3, 3, 4, 3, 2), adaptDF = FALSE)
pc.fit = pc(suffStat = suffStat, indepTest = disCItest, alpha = 0.05, labels = lables)
par(cex=0.25)
plot(pc.fit)
pc
as(pc.fit, 'amat')
dist(as(pc.fit, 'amat'))
library(philentropy)
### Install Packages
# install.packages('remotes', dependencies = TRUE)
# install.packages('bnlearn', dependencies=TRUE)
# install.packages('pROC', dependencies=TRUE)
# install.packages('ggplot2', dependencies=TRUE)
# install.packages('caret', dependencies=TRUE)
# install.packages("dagitty", dependencies = TRUE)
# install.packages('pcalg', dependencies=TRUE)
# install.packages("BiocManager")
install.packages('philentropy', dependencies=TRUE)
library(philentropy)
distance(as(pc.fit, 'amat'))
adj_mat <- as(pc.fit, 'amat')
adj_mat <- as.matrix(adj_mat)
adj_mat
distance(as(pc.fit, 'amat'))
distance(adj_mat)
adj_mat <- as.data.frame(adj_mat)
adj_mat <- as.matrix(adj_mat)
adj_mat
adj_mat <- as.table(adj_mat)
adj_mat
distance(adj_mat)
adj_mat <- as.matrix(adj_mat)
adj_mat
distance(adj_mat)
adj_mat <- as.matrix(adj_mat)
adj_mat
distance(adj_mat)
adj_mat <- as(pc.fit, 'amat')
adj_mat <- as.tbl(adj_mat)
adj_mat <- as.array(adj_mat)
adj_mat
adj_mat <- as.array(adj_mat)
adj_mat <- as.table(adj_mat)
adj_mat
distance(adj_mat)
distance(x=adj_mat)
adj_mat <- as.matrix(adj_mat)
adj_mat <- as.matrix(adj_mat)
adj_mat
adj_maat <- as.matrix(adj_mat)
adj_maat <- data.frame(adj_mat)
distance(x=adj_maat)
adj_maat <- data.frame(as.numeric(adj_mat))
distance(x=adj_maat)
